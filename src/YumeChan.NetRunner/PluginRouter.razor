@using YumeChan.NetRunner.Plugins.Infrastructure.Blazor.Router
@using YumeChan.Core.Services.Plugins
@using YumeChan.PluginBase

@inject PluginsLoader PluginsLoader;
@inject IJSRuntime JsRuntime;

@page "/plugin/{PluginName}/{*PathSlug}"
@page "/p/{PluginName}/{*PathSlug}"

<NestedPluginRouter Plugin="_plugin" RoutePath=@PathSlug PreferExactMatches>
    <Found Context="routeData">
        <AuthorizeRouteView @ref=_authorizeRouteView RouteData=routeData />
    </Found>

    <NotFound>
        <CascadingAuthenticationState>
            @if (PathSlug is null)
            {
            @* This means we've hit the root of the plugin, yet no homepage for the plugin exists. *@
                <h5>Hmm... Seems like @PluginName has no plugin homepage.</h5>
            }
            else
            {
                <p>Sorry, there's nothing at this address.</p>
            }
        </CascadingAuthenticationState>
    </NotFound>
</NestedPluginRouter>

@{ _routerRendered = true; }

@code {
	[Parameter] public string PluginName { get; set; }
	[Parameter] public string PathSlug { get; set; }

    private AuthorizeRouteView _authorizeRouteView = new();
    private IPlugin _plugin;
    
    private bool _routerRendered;
    
    
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        PluginsLoader.PluginManifests.TryGetValue(PluginName, out _plugin);
    }

    protected override bool ShouldRender() => !_routerRendered;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        @if (firstRender && _plugin is not null)
        {
            await JsRuntime.InvokeVoidAsync("setBase", $"/p/{PluginName}/");
        }
        
        await base.OnAfterRenderAsync(firstRender);
    }
}